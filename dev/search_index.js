var documenterSearchIndex = {"docs":
[{"location":"load_mesh.html#How-to-load-a-mesh?","page":"How to load a mesh?","title":"How to load a mesh?","text":"","category":"section"},{"location":"load_mesh.html","page":"How to load a mesh?","title":"How to load a mesh?","text":"First load tools from the Mesh utility module     using WavesAndEigenvalues.Meshutils Then load your mesh     Mesh(\"filename.msh\",scale=0.001) The scale parameter is optional and multiplies the coordinates of the red mesh with some number. This functionality is basically here to convert units of length.","category":"page"},{"location":"Helmholtz.html#Helmholtz","page":"Helmholtz","title":"Helmholtz","text":"","category":"section"},{"location":"Helmholtz.html","page":"Helmholtz","title":"Helmholtz","text":"WavesAndEigenvalues.Helmholtz\nWavesAndEigenvalues.Helmholtz.discretize\nWavesAndEigenvalues.Helmholtz.bloch_expand","category":"page"},{"location":"Helmholtz.html#WavesAndEigenvalues.Helmholtz","page":"Helmholtz","title":"WavesAndEigenvalues.Helmholtz","text":"Module providing functionality to numerically discretize the (thermoacoustic) Helmholtz equation by first, second, and hermitian-order finite elements.\n\n\n\n\n\n","category":"module"},{"location":"Helmholtz.html#WavesAndEigenvalues.Helmholtz.discretize","page":"Helmholtz","title":"WavesAndEigenvalues.Helmholtz.discretize","text":"L=discretize(mesh, dscrp, C; order=:1, b=:__none__, mass_weighting=true,source=false)\n\nDiscretize the Helmholtz equation using the mesh mesh.\n\nArguments\n\nmesh::Mesh: tetrahedral mesh\ndscrp::Dict: dictionary containing information on the equations to be solved. Thgese include standard wave propagation, boundary conditions, flame responses. See below for more info\nC:Array: array defining the speed of sound. If length(C)==length(mesh.tetrahedra) the speed of sound is constant along one tetrahedron. If length(C)==size(mesh.points,2) the speed of sound is linearly interpolated between the vertices of the mesh.\norder::Symbol = :1: optional paramater to select between first (order==:1 the default), second (order==:2),or hermitian-order (order==:h) finite elements.\nb::Symbol=:__none__: optional parameter defining the Bloch wave number. If b=:__none__ (the default) no Blochwave formalism is applied.\nmass_weighting=true: optional parameter if true mass matrix is used as weighting matrix for householder, otherwise this matrix is not set.\nsource::Bool=false: optional parameter to toggle the return of a source vector (experimental)\n\nReturns\n\nL::LinearOperatorFamily: parametereized discretization of the specified Helmholtz equation.\nrhs::LinearOperatorFamily: parameterized discretization of the source vector. Only returned if source==true.  (experimental)\n\nAccepted values for dscrp dictionary\n\nCurrently supported entries for describing the physics of the problem are\n\nVolume equations\n\ndscrp[\"volumeDomain\"] = (:interior,()): discretizes the mass and stiffnes matrices of the helmholtz equation on the specified \"volumeDomain\".\ndscrp[\"volumeDomain\"] = (:flame,(gamma,rho,nglobal,x_ref,n_ref,n_sym,tau_sym,n_val,tau_val)): discretizes the flame matrix non-homogeneous TA helmholtz equation using an n-τ model on the specified \"volumeDomain\". The needed inputs are:\ngamma: heat capacity ratio\nrho:   density\nnglobal: total heat release over velocity, Q/U\nx_ref: reference position for velocity feedback\nn_ref: gradient of velocity feedback\nn_sym: symbol to be used for n\ntau_sym: symbol to be used for τ\nn_val: default value for n\ntau_val: default value for τ\ndscrp[\"volumeDomain\"] = (:flame,(gamma,rho,nglobal,x_ref,n_ref,FTF)): discretizes the flame matrix non-homogeneous TA helmholtz equation using a frequency-dependent user-defined FTF(ω) model on the specified \"volumeDomain\". The needed inputs are:\nThe defined FTF function should be defined in algebra.jl, and contain routines to calculate its derivatives w.r.t. ω.\n\nBoundary equation\n\ndscrp[\"boundaryDomain\"] = (:admittance,(:Symbol, value)): discretizes the boundary matrix with constant admittance value on the specified \"boundaryDomain\"\ndscrp[\"boundaryDomain\"] = (:admittance,(Y(ω)),): discretizes the boundary matrix with a frequency-dependent admittance specified by the function Y(ω) on the specified \"boundaryDomain\"\nThe defined function for the admittance should be defined in algebra.jl, and contain routines to calculate its derivatives w.r.t. ω.\ndscrp[\"boundaryDomain\"] = (:admittance,(A,B,C,D): discretizes the boundary matrix with a state-space model admittance specified by the function C_s(iωI-A)^{-1}B on the specified \"boundaryDomain\"\n\nAvailable but undocumented equations\n\nspeaker: simulate the response to a forced speaker\nflameresponse: simulate the response to the one-way flame coupling with the acoustics\nother soecific flame models (plain FTF, fancy flame)\n\n\n\n\n\n","category":"function"},{"location":"Helmholtz.html#WavesAndEigenvalues.Helmholtz.bloch_expand","page":"Helmholtz","title":"WavesAndEigenvalues.Helmholtz.bloch_expand","text":"v=bloch_expand(mesh::Mesh,sol::Solution,b=:b)\n\nExpand solution vector sol.v on mesh meshwith Bloch wave number sol.params[b] and return it as v.\n\n\n\n\n\n","category":"function"},{"location":"Mesh.html#Mesh","page":"Mesh","title":"Mesh","text":"","category":"section"},{"location":"Mesh.html","page":"Mesh","title":"Mesh","text":"WavesAndEigenvalues.Meshutils\nWavesAndEigenvalues.Meshutils.Mesh\nWavesAndEigenvalues.Meshutils.Mesh(::String)\nWavesAndEigenvalues.Meshutils.generate_field\nWavesAndEigenvalues.Meshutils.vtk_write\nWavesAndEigenvalues.Meshutils.extend_mesh\nWavesAndEigenvalues.Meshutils.octosplit","category":"page"},{"location":"Mesh.html#WavesAndEigenvalues.Meshutils","page":"Mesh","title":"WavesAndEigenvalues.Meshutils","text":"Module containing functionality to read and process tetrahedral meshes from gmsh.\n\n\n\n\n\n","category":"module"},{"location":"Mesh.html#WavesAndEigenvalues.Meshutils.Mesh","page":"Mesh","title":"WavesAndEigenvalues.Meshutils.Mesh","text":"Definition of the mesh type\n\nFields\n\nname::String: the name of the mesh.\npoints::Array: 3×N array containing the coordinates of the N points defining the mesh.\nlines::List: List of simplices defining the edges of the mesh\ntriangles::List: List of simplices defining the surface triangles of the mesh\ntetrahedra::List: List of simplices defining the tetrahedra of the mesh\ndomains::Dict: Dictionairy defining the domains of the mesh. See comments below.\nfile::String: path to the file containing the mesh.\ntri2tet::Array: Array of length length(tetrahedra) containing the indices of the connected tetrahedra.\ndos: special field meant to contain symmetry information of highly symmetric meshes.\n\nNotes\n\nThe meshes are supposed to be tetrahedral. All simplices (lines, triangles, and tetrahedra) are stored as lists of simplices. Simplices are lists of integers containing the indices of the points (i.e. the column number in the points array) forming the simplex. This means a line is a two-entry list, a triangle a three-entry list, and a tetrahedron a four-entry list. For convenience certain entities of the mesh can be further defined in the domains dictionary. Each key defines a domain and maps to another dictionary. This second-level dictionary contains at least two keys: \"dimension\" mapping to the dimension of the specified domain (1,2, or 3) and \"simplices\" containing a list of integers mapping into the respective simplex lists. More keys may be added to the dictionary to define additional and/or custom information on the domain. For instance the compute_size! function adds an entry with the domain size.\n\n\n\n\n\n","category":"type"},{"location":"Mesh.html#WavesAndEigenvalues.Meshutils.Mesh-Tuple{String}","page":"Mesh","title":"WavesAndEigenvalues.Meshutils.Mesh","text":"mesh=Mesh(file_name::String; scale=1)\n\nread a tetrahedral mesh from gmsh file into mesh. The optional scaling factor scale may be used to scale the units of the mesh.\n\n\n\n\n\n","category":"method"},{"location":"Mesh.html#WavesAndEigenvalues.Meshutils.generate_field","page":"Mesh","title":"WavesAndEigenvalues.Meshutils.generate_field","text":"generate_field(mesh::Mesh,func,el_type=0)\n\nGenerate a field by applying the function func onto the mesh mesh. The element type is either el_type=0 for field values associated with the mesh tetrahedra or el_type=1 for field values associated with the mesh vertices. The function func must accept exactly three input numerical arguments, corresponding to the three space dimensions.\n\n\n\n\n\n","category":"function"},{"location":"Mesh.html#WavesAndEigenvalues.Meshutils.vtk_write","page":"Mesh","title":"WavesAndEigenvalues.Meshutils.vtk_write","text":"vtk_write(file_name, mesh, data)\n\nWrite vtk-file containing the datavalues data given on the usntructured grid mesh.\n\nArguments\n\nfile_name::String: name given to the written files. The name will be preceeded by a specifier. See Notes below.\nmesh::Mesh: mesh associated with the data.\ndata::Dict: Dictionairy containing the data.\n\nNotes\n\nThe routine automatically sorts the data according to its type and writes it in up to three diffrent files. Data that is constant on a tetrahedron goes into \"$(filename)_const.vtu\", data that is linearly interpolated on a tetrahedron goes into \"$(filename)_lin.vtu\", and data that is quadratically interpolated on a tetrahedron goes into \"$(filename)_quad.vtu\"\n\n\n\n\n\n","category":"function"},{"location":"Mesh.html#WavesAndEigenvalues.Meshutils.extend_mesh","page":"Mesh","title":"WavesAndEigenvalues.Meshutils.extend_mesh","text":"full_mesh=extend_mesh(mesh::Mesh, doms; sym_name=\"Symmetry\", blch_name=\"Bloch\", unit=false)\n\nCreate full mesh or unit cell from half cell represented in mesh.\n\nArguments\n\nmesh::Mesh: mesh representing the half cell. The mesh must span a sector of 2π/2N, where N is the (integer) degree of symmetry of the full mesh.\ndoms::List: list of 2-tuples containing the domain names and their copy_degree (see notes below).\nsym_name::String=\"Symmetry\": name of the domain of mesh that forms the symmetry plane of the half-mesh.\nblch_name::String=\"Bloch\": name of the domain of mesh that forms the remaining azimuthal plane of the half-mesh.\nunit::Bool=false: toggle whether extend the mesh to unit cell only.\n\nReturns\n\nfull_mesh::Mesh: representation of the full mesh.\n\nNotes\n\nThe routine copies only domains that are specified  in doms. These domains are extended according to the specified copy_degree. The following are available:\n\n:full: extent the domain and save it under the same name in full_mesh.\n:unit: extent the domain and save the individual unit cells labeled from 0 to N-1 in full_mesh.\n:half: extent the domain and save the individual unit cells as half cells labeled from 0 to N-1 in full_mesh where one half-cell  contains _img in its name.\n\nMultiple styles can be mixed in one domain specification. An example for doms would be     doms=[(\"Interior\", :full), (\"Outlet\", :unit), (\"Flame\", :half)]\n\n\n\n\n\n","category":"function"},{"location":"Mesh.html#WavesAndEigenvalues.Meshutils.octosplit","page":"Mesh","title":"WavesAndEigenvalues.Meshutils.octosplit","text":"new_mesh=octosplit(mesh::Mesh)\n\nSubdivide each tetrahedron in the mesh mesh into 8 tetrahedra by splitting each edge at its center.\n\nNotes\n\nThe algorithm introduces length(mesh.lines) new vertices. This yields a finer mesh featuring 8*size(mesh,2) tetrahedra, 4*length(mesh.triangles) triangles, and 2*length(mesh.lines) lines. From the  3 possible subdivision of a tetrahedron the algorithm automatically chooses the one that minimizes the edge lengths of the new tetrahedra. The point labeling of new_mesh is consistent with the point labeling in mesh, i.e., the first size(mesh.points,2) points in new_mesh.points are identical to the points in mesh.points. Hence, mesh and new_mesh form a hierachy of meshes.\n\n\n\n\n\n","category":"function"},{"location":"NLEVP.html#NLEVP","page":"NLEVP","title":"NLEVP","text":"","category":"section"},{"location":"NLEVP.html","page":"NLEVP","title":"NLEVP","text":"WavesAndEigenvalues.NLEVP\nWavesAndEigenvalues.NLEVP.householder\nWavesAndEigenvalues.NLEVP.Solution\nWavesAndEigenvalues.NLEVP.perturb!\nWavesAndEigenvalues.NLEVP.perturb_fast!\nWavesAndEigenvalues.NLEVP.beyn","category":"page"},{"location":"NLEVP.html#WavesAndEigenvalues.NLEVP","page":"NLEVP","title":"WavesAndEigenvalues.NLEVP","text":"Module containing routines to solve and perturb nonlinear eigenvalue problems.\n\n\n\n\n\n","category":"module"},{"location":"NLEVP.html#WavesAndEigenvalues.NLEVP.householder","page":"NLEVP","title":"WavesAndEigenvalues.NLEVP.householder","text":"sol::Solution, n, flag = householder(L::LinearOperatorFamily, z; <keyword arguments>)\n\nUse a Householder method to iteratively find an eigenpar of L, starting the the iteration from z.\n\nArguments\n\nL::LinearOperatorFamily: Definition of the nonlinear eigenvalue problem.\nz: Initial guess for the eigenvalue.\nmaxiter::Integer=10: Maximum number of iterations.\ntol=0: Absolute tolerance to trigger the stopping of the iteration. If the difference of two consecutive iterates is abs(z0-z1)<tol the iteration is aborted.\nrelax=1: relaxation parameter\nlam_tol=0.: tolerance for the auxiliary eigenvalue to test convergence\norder::Integer=1: Order of the Householder method, Maximum is 5\nn_eig_val::Integer=1: Number of Eigenvalues to be searched for in intermediate ARPACK calls.\nv0::Vector: Initial vector for Krylov subspace generation in ARPACK calls. If not provided the vector is initialized with ones.\noutput::Bool: Toggle printing online information.\n\nReturns\n\nsol::Solution\nn::Integer: Number of perforemed iterations\nflag::Integer: flag reporting the success of the method. Most important values are 1: method converged, 0: convergence might be slow, -1:maximum number of iteration has been reached. For other error codes see the source code.\n\nNotes\n\nHousholder methods are a generalization of Newton's method. If order=1 the Housholder method is identical to Newton's method. The solver then reduces to the \"generalized Rayleigh Quotient iteration\" presented in [1]. If no relaxation is used (relax == 1), the convergence rate is of order+1. With relaxation (relax != 1) the convergence rate is 1. Thus, with a higher order less iterations will be necessary. However, the computational time must not necessarily improve nor do the convergence properties. Anyway, if the method converges, the error in the eigenvalue is bounded above by tol. For more details on the solver, see the thesis [2].\n\nReferences\n\n[1] P. Lancaster, A Generalised Rayleigh Quotient Iteration for Lambda-Matrices,Arch. Rational Mech Anal., 1961, 8, p. 309-322, https://doi.org/10.1007/BF00277446\n\n[2] G.A. Mensah, Efficient Computation of Thermoacoustic Modes, Ph.D. Thesis, TU Berlin, 2019\n\nSee also: beyn\n\n\n\n\n\n","category":"function"},{"location":"NLEVP.html#WavesAndEigenvalues.NLEVP.Solution","page":"NLEVP","title":"WavesAndEigenvalues.NLEVP.Solution","text":"Stores the solution(s) returned by the nonlinear eigenvalue solvers.\n\nStored Data\n\neigval: symbol that represents the eigenvalue\neigval_pert: Dictionary containing eigenvalue perturbation corrections\nparams: Dictionary containing the list of parameters at which the eigenvalue was identified\nv: direct eigenvector\nv_adj: adjoint eigenvector\nv_pert: Dictionary containing eigenvector perturbation correction\n\nMethods\n\nSolution(:Symbol, val, n): Estimates the eigenvalue using perturbation theory at order nth order perturbation theory when the parameter :Symbol takes value val\n\n\n\n\n\n","category":"type"},{"location":"NLEVP.html#WavesAndEigenvalues.NLEVP.perturb!","page":"NLEVP","title":"WavesAndEigenvalues.NLEVP.perturb!","text":"perturb!(sol::Solution,L::LinearOperatorFamily,param::Symbol,N::Int; <keyword arguments>)\n\nCompute the Nth order power series perturbation coefficients for the solution sol of the nonlineaer eigenvalue problem given by the operator family L with respect to the parameter param. The coefficients will be stored in the field sol.eigval_pert and sol.v_pert for the eigenvalue and the eignevector, respectively.\n\nKeyword Arguments\n\nmode = :compact: parameter controlling internal programm flow. Use the default, unless you know what you are doing.\n\nNotes\n\nFor large perturbation orders N the method might be slow.\n\nSee also: perturb_fast!\n\n\n\n\n\n","category":"function"},{"location":"NLEVP.html#WavesAndEigenvalues.NLEVP.perturb_fast!","page":"NLEVP","title":"WavesAndEigenvalues.NLEVP.perturb_fast!","text":"perturb_fast!(sol::Solution,L::LinearOperatorFamily,param::Symbol,N::Int; <keyword arguments>)\n\nCompute the Nth order power series perturbation coefficients for the solution sol of the nonlineaer eigenvalue problem given by the operator family L with respect to the parameter param. The coefficients will be stored in the field sol.eigval_pert and sol.v_pert for the eigenvalue and the eignevector, respectively.\n\nKeyword Arguments\n\nmode = :compact: parameter controlling internal programm flow. Use the default, unless you know what you are doing.\n\nNotes\n\nThis method reads multi-indeces for the computation of the power series coefficients from disk. Make sure that JulHoltz is properly installed to use this fast method.\n\nSee also: perturb!\n\n\n\n\n\n","category":"function"},{"location":"NLEVP.html#WavesAndEigenvalues.NLEVP.beyn","page":"NLEVP","title":"WavesAndEigenvalues.NLEVP.beyn","text":"Ω, P = beyn(L::LinearOperatorFamily, Γ; <keyword arguments>)\n\nCompute all eigenvalues of L inside the contour Γ together with the associated eigenvectors. The contour is given as a list of complex numbers which are interpreted as polygon vertices in the complex plane.  The eigenvalues are stored in the list Ω and the eigenvectors are stored in the columns of P. The eigenvector P[:,i] corresponds to the eigenvalue Ω[i], i.e., they satisfy L(Ω[i])P[:,i]=0.\n\nArguments\n\nL::LinearOperatorFamily: Definition of the non-linear eigenvalue problem\nΓ::Array: List of complex points defining the contour.\nl::Integer = 5: estimate of the number of eigenvalues inside of Γ.\nK::Integer = 1: Augmention dimension if Γ is assumed to contain more than size(L)[1] eigenvalues.\nN::Integer = 16: Number of evaluation points used to perform the Gauss-Legendre integration along each edge of Γ.\ntol::Float=0.0: Threshold value to discard spurious singular values. If set to 0 (the default) no singular values are discarded.\npos_test::bool=true: If set to true perform positions test on the computed eigenvalues, i.e., check whether the eigenvalues are enclosed by Γ and disregard all eigenvalues which fail the test.\noutput::bool=false: Show progressbar if true.\n\nReturns\n\nΩ::Array: List of computed eigenvalues\nP::Matrix: Matrix of eigenvectors.\n\nNotes\n\nThe original algorithm was first presented by Beyn in [1]. The implementation closely follows the pseudocode from Buschmann et al. in [2].\n\nReferences\n\n[1] W.-J. Beyn, An integral method for solving nonlinear eigenvalue problems, Linear Algebra and its Applications, 2012, 436(10), p.3839-3863, https://doi.org/10.1016/j.laa.2011.03.030\n\n[2] P.E. Buschmann, G.A. Mensah, J.P. Moeck, Solution of Thermoacoustic Eigenvalue Problems with a Non-Iterative Method, J. Eng. Gas Turbines Power, Mar 2020, 142(3): 031022 (11 pages) https://doi.org/10.1115/1.4045076\n\nSee also: householder\n\n\n\n\n\n","category":"function"},{"location":"index.html#WavesAndEigenvalues.jl","page":"Home","title":"WavesAndEigenvalues.jl","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Documentation for WavesAndEigenvalues.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"A package for building Finite Element Models of wave-based problems and solving the associated eigenvalue problems.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"note: Note\nThis Package is under development, we will add more features soon!","category":"page"},{"location":"index.html#Package-Features","page":"Home","title":"Package Features","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Load mesh files in .msh format, with surface and volumes labeled (see e.g. gmsh).\nSpecify the equations to be solved on each surface and volumes.\nBuild a paramteric depedent FEM sparse_matrix.\nCalculate eigenvalues of nonlinear eigenvalue problems (NLEVP).","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"The Manual documents the package modules and functionalities.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Examples on usage in the form of Jupyter Notebooks will be made available soon.","category":"page"},{"location":"index.html#Documentation-Outline","page":"Home","title":"Documentation Outline","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Pages = [\n        \"Mesh.md\",\n        \"Helmholtz.md\",\n        \"NLEVP.md\",\n]\nDepth = 2","category":"page"},{"location":"index.html#Examples","page":"Home","title":"Examples","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Pages =[\n        \"load_mesh.md\",\n\t\"tutorial_01_rijke_tube.md\",\n]\nDepth = 1","category":"page"}]
}
